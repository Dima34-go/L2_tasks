Схема:

https://golangbyexample.com/visitor-design-pattern-go/
https://medium.com/@felipedutratine/visitor-design-pattern-in-golang-3c142a12945a

Цель:

Вводит новые операции в существующие структуры без изменения структур, и внедрения в них новых методов.

Необходимо сделать какие-то несвязные операции над рядом объектов, но нужно избежать загрязнения их кода.
И нет возможности или желания запрашивать тип каждого узла и осуществлять приведение указателя к правильному
типу, прежде чем выполнить нужную операцию.

Случаи применения:
1.) Имеются различные объекты разных классов с разными интерфейсами, но над ними нужно совершать операции,
зависящие от конкретных классов;
2.) Необходимо над структурой выполнить различные, усложняющие структуру операции;
3.) Часто добавляются новые операции над структурой.

Плюсы:

1.)Упрощается добавление новых операций;
2.)Объединение родственных операции в классе Visitor;
3.)Класс Visitor может запоминать в себе какое-то состояние по мере обхода контейнера.

Минусы:

1.)Затруднено добавление новых классов, поскольку нужно обновлять иерархию посетителя и его сыновей.
